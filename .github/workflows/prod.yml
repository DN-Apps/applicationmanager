name: Build & Deploy PROD

on:
  push:
    branches: ["main"]        # <- falls du "prod" als Branch nutzt, ändere hier auf ["prod"]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/prod.yml"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  PROD_API_URL: https://applicationmanager.ned-it.de
  PROD_URL: https://applicationmanager.ned-it.de

concurrency:
  group: prod-deploy
  cancel-in-progress: true

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Set image names
        run: echo "IMAGE_BACKEND=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/appmanager-backend" >> $GITHUB_ENV

      - name: Login to GHCR (for push)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push backend (prod tag + sha)
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.IMAGE_BACKEND }}:prod
            ${{ env.IMAGE_BACKEND }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Set image names
        run: echo "IMAGE_FRONTEND=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/appmanager-frontend" >> $GITHUB_ENV

      - name: Login to GHCR (for push)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push frontend (prod tag + sha)
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          build-args: |
            API_PUBLIC_URL=${{ env.PROD_API_URL }}
          tags: |
            ${{ env.IMAGE_FRONTEND }}:prod
            ${{ env.IMAGE_FRONTEND }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-prod:
    needs: [build-backend, build-frontend]
    runs-on: ubuntu-latest
    steps:
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy with health check & auto-rollback
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
          PROD_URL: ${{ env.PROD_URL }}
        run: |
          ssh -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "REGISTRY_USER='$REGISTRY_USER' GHCR_TOKEN='$GHCR_TOKEN' PROD_URL='$PROD_URL' bash -s" <<'EOSH'
          set -e

          COMPOSE="/srv/docker/prod/applicationmanager/compose/docker-compose.prod.yml"

          # Container-IDs per compose ermitteln (robust, da keine container_name gesetzt)
          CID_BE=$(docker compose -f "$COMPOSE" ps -q prod-appmanager-backend 2>/dev/null || true)
          CID_FE=$(docker compose -f "$COMPOSE" ps -q prod-appmanager-frontend 2>/dev/null || true)

          # Vorherige Image-IDs sichern (für Rollback)
          PREV_BACKEND=""
          PREV_FRONTEND=""
          if [ -n "$CID_BE" ]; then PREV_BACKEND=$(docker inspect -f '{{.Image}}' "$CID_BE" || true); fi
          if [ -n "$CID_FE" ]; then PREV_FRONTEND=$(docker inspect -f '{{.Image}}' "$CID_FE" || true); fi

          # Aktuelle Image-Tags sichern (wohin zurückgetaggt werden soll)
          CUR_BACKEND_NAME=$(docker compose -f "$COMPOSE" config --services | grep '^prod-appmanager-backend$' >/dev/null && \
                             docker compose -f "$COMPOSE" config | awk '/image: .*appmanager-backend/{print $2; exit}')
          CUR_FRONTEND_NAME=$(docker compose -f "$COMPOSE" config --services | grep '^prod-appmanager-frontend$' >/dev/null && \
                             docker compose -f "$COMPOSE" config | awk '/image: .*appmanager-frontend/{print $2; exit}')

          echo "$GHCR_TOKEN" | docker login ghcr.io -u "$REGISTRY_USER" --password-stdin

          # Pull + Start
          docker compose -f "$COMPOSE" pull
          docker compose -f "$COMPOSE" up -d

          # -------- Interne Healthchecks über compose exec --------
          echo "Warte auf Container (intern)…"
          fe_ok=false; be_ok=false
          for i in {1..24}; do
            if docker compose -f "$COMPOSE" exec -T prod-appmanager-frontend  sh -lc 'wget -qO- http://127.0.0.1:80/ >/dev/null'; then fe_ok=true; else fe_ok=false; fi
            if docker compose -f "$COMPOSE" exec -T prod-appmanager-backend   sh -lc 'wget -qO- http://127.0.0.1:5000/api/health 2>/dev/null' | grep -q '"status":"ok"'; then be_ok=true; else be_ok=false; fi
            $fe_ok && $be_ok && break
            sleep 5
          done

          if ! $fe_ok || ! $be_ok; then
            echo "Container intern nicht ready -> ROLLBACK"
            if [ -n "$PREV_BACKEND" ] && [ -n "$CUR_BACKEND_NAME" ]; then docker tag "$PREV_BACKEND" "$CUR_BACKEND_NAME"; fi
            if [ -n "$PREV_FRONTEND" ] && [ -n "$CUR_FRONTEND_NAME" ]; then docker tag "$PREV_FRONTEND" "$CUR_FRONTEND_NAME"; fi
            docker compose -f "$COMPOSE" up -d --no-build --no-deps --pull never prod-appmanager-backend prod-appmanager-frontend
            exit 1
          fi

          # -------- Externe Healthchecks --------
          echo "Externe Healthchecks…"
          ok_backend=false; ok_front=false
          for i in {1..24}; do
            curl -fsS "$PROD_URL/api/health" | grep -q '"status":"ok"' && ok_backend=true || ok_backend=false
            curl -fsSIL "$PROD_URL/" | head -n1 | grep -q ' 200 ' && ok_front=true || ok_front=false
            $ok_backend && $ok_front && break
            sleep 5
          done

          if ! $ok_backend || ! $ok_front; then
            echo "Deploy unhealthy -> ROLLBACK"
            if [ -n "$PREV_BACKEND" ] && [ -n "$CUR_BACKEND_NAME" ]; then docker tag "$PREV_BACKEND" "$CUR_BACKEND_NAME"; fi
            if [ -n "$PREV_FRONTEND" ] && [ -n "$CUR_FRONTEND_NAME" ]; then docker tag "$PREV_FRONTEND" "$CUR_FRONTEND_NAME"; fi
            docker compose -f "$COMPOSE" up -d --no-build --no-deps --pull never prod-appmanager-backend prod-appmanager-frontend
            exit 1
          fi

          echo "Deploy healthy"
          EOSH
