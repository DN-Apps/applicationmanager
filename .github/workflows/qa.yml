name: Build & Deploy QA

on:
  push:
    branches: [ "qa" ]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/qa.yml"
  workflow_dispatch:

permissions:
  contents: read
  packages: write

env:
  REGISTRY: ghcr.io
  QA_API_URL: https://qa-applicationmanager.ned-it.de

concurrency:
  group: qa-deploy
  cancel-in-progress: true

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Set image names
        run: |
          echo "IMAGE_BACKEND=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/appmanager-backend" >> $GITHUB_ENV

      - name: Login to GHCR (for push)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ${{ env.IMAGE_BACKEND }}:qa
            ${{ env.IMAGE_BACKEND }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: docker/setup-buildx-action@v3

      - name: Set image names
        run: |
          echo "IMAGE_FRONTEND=ghcr.io/${GITHUB_REPOSITORY_OWNER,,}/appmanager-frontend" >> $GITHUB_ENV

      - name: Login to GHCR (for push)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          build-args: |
            API_PUBLIC_URL=${{ env.QA_API_URL }}
          tags: |
            ${{ env.IMAGE_FRONTEND }}:qa
            ${{ env.IMAGE_FRONTEND }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-qa:
    needs: [ build-backend, build-frontend ]
    runs-on: ubuntu-latest
    steps:
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy with health check & auto-rollback
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          # Übergib Variablen in die Remote-Session und nutze einen Heredoc (kein Quote-Chaos)
          ssh -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "REGISTRY_USER='$REGISTRY_USER' GHCR_TOKEN='$GHCR_TOKEN' QA_URL='${{ env.QA_API_URL }}' bash -s" <<'EOSH'
          set -e

          COMPOSE="/srv/docker/qa/applicationmanager/compose/docker-compose.qa.yml"

          # Vorherige Images (ID) und aktuell verwendete Image-Namen sichern
          PREV_BACKEND=$(docker inspect -f '{{.Image}}' qa-appmanager-backend 2>/dev/null || true)
          PREV_FRONTEND=$(docker inspect -f '{{.Image}}' qa-appmanager-frontend 2>/dev/null || true)
          CUR_BACKEND_NAME=$(docker inspect -f '{{.Config.Image}}' qa-appmanager-backend 2>/dev/null || true)
          CUR_FRONTEND_NAME=$(docker inspect -f '{{.Config.Image}}' qa-appmanager-frontend 2>/dev/null || true)
          echo "Prev IDs: BACKEND=$PREV_BACKEND FRONTEND=$PREV_FRONTEND"
          echo "Current tags: BACKEND=$CUR_BACKEND_NAME FRONTEND=$CUR_FRONTEND_NAME"

          # Login & Update
          echo "$GHCR_TOKEN" | docker login ghcr.io -u "$REGISTRY_USER" --password-stdin
          docker compose -f "$COMPOSE" pull
          docker compose -f "$COMPOSE" up -d

          # Externe Healthchecks (mehrfach versuchen)
          ok_backend=false
          ok_front=false
          for i in 1 2 3 4 5 6; do
            if curl -fsS "$QA_URL/api/health" | grep -q '"status":"ok"'; then ok_backend=true; fi
            if curl -fsSI "$QA_URL/" | head -n1 | grep -q '200'; then ok_front=true; fi
            $ok_backend && $ok_front && break
            sleep 5
          done

          if ! $ok_backend || ! $ok_front; then
            echo "Deploy unhealthy -> ROLLBACK"
            # :qa lokal zurück auf vorherige Images taggen (anhand der vorherigen Container-Images)
            if [ -n "$PREV_BACKEND" ] && [ -n "$CUR_BACKEND_NAME" ]; then docker tag "$PREV_BACKEND" "$CUR_BACKEND_NAME"; fi
            if [ -n "$PREV_FRONTEND" ] && [ -n "$CUR_FRONTEND_NAME" ]; then docker tag "$PREV_FRONTEND" "$CUR_FRONTEND_NAME"; fi

            # Beim Rollback kein Pull erzwingen
            docker compose -f "$COMPOSE" up -d --no-build --no-deps --pull never qa-appmanager-backend qa-appmanager-frontend
            exit 1  # Job rot markieren
          fi

          echo "Deploy healthy"
          EOSH
