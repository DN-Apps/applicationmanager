name: Build & Deploy QA

on:
  push:
    branches: [ "qa" ]
    paths:
      - "backend/**"
      - "frontend/**"
      - ".github/workflows/qa.yml"
  workflow_dispatch:

# GITHUB_TOKEN braucht Schreibrechte auf Packages (stellen wir gleich in Punkt B ein)
permissions:
  contents: read
  packages: write

# zentrale Variablen
env:
  REGISTRY: ghcr.io
  IMAGE_BACKEND: ghcr.io/${{ github.repository_owner }}/appmanager-backend
  IMAGE_FRONTEND: ghcr.io/${{ github.repository_owner }}/appmanager-frontend
  QA_API_URL: https://qa-applicationmanager.ned-it.de

# parallele Läufe für QA verhindern
concurrency:
  group: qa-deploy
  cancel-in-progress: true

jobs:
  build-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR (for push)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push backend
        uses: docker/build-push-action@v6
        with:
          context: ./backend
          push: true
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/appmanager-backend:qa
            ghcr.io/${{ env.OWNER_LC }}/appmanager-backend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Set lowercase owner
        run: echo "OWNER_LC=${GITHUB_REPOSITORY_OWNER,,}" >> $GITHUB_ENV

      - uses: docker/setup-buildx-action@v3

      - name: Login to GHCR (for push)
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      - name: Build & push frontend
        uses: docker/build-push-action@v6
        with:
          context: ./frontend
          push: true
          build-args: |
            API_PUBLIC_URL=${{ env.QA_API_URL }}
          tags: |
            ghcr.io/${{ env.OWNER_LC }}/appmanager-frontend:qa
            ghcr.io/${{ env.OWNER_LC }}/appmanager-frontend:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  deploy-qa:
    needs: [ build-backend, build-frontend ]
    runs-on: ubuntu-latest
    steps:
      - name: Add SSH key
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.SSH_KEY }}

      - name: Deploy on server
        env:
          SSH_USER: ${{ secrets.SSH_USER }}
          SSH_HOST: ${{ secrets.SSH_HOST }}
          REGISTRY_USER: ${{ secrets.REGISTRY_USER }}
          GHCR_TOKEN: ${{ secrets.GHCR_TOKEN }}
        run: |
          ssh -o StrictHostKeyChecking=no "$SSH_USER@$SSH_HOST" "
            set -e
            docker login ghcr.io -u '$REGISTRY_USER' -p '$GHCR_TOKEN'
            docker compose -f /srv/docker/qa/applicationmanager/compose/docker-compose.qa.yml pull
            docker compose -f /srv/docker/qa/applicationmanager/compose/docker-compose.qa.yml up -d
            docker image prune -f
          "
